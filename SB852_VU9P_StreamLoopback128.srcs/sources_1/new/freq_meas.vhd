-- WARNING: Do NOT edit the input and output ports in this file in a text
-- editor if you plan to continue editing the block that represents it in
-- the Block Editor! File corruption is VERY likely to occur.

-- Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
-- Your use of Altera Corporation's design tools, logic functions
-- and other software and tools, and its AMPP partner logic
-- functions, and any output files from any of the foregoing
-- (including device programming or simulation files), and any
-- associated documentation or information are expressly subject
-- to the terms and conditions of the Altera Program License
-- Subscription Agreement, the Altera Quartus Prime License Agreement,
-- the Altera MegaCore Function License Agreement, or other
-- applicable license agreement, including, without limitation,
-- that your use is for the sole purpose of programming logic
-- devices manufactured by Altera and sold by Altera or its
-- authorized distributors.  Please refer to the applicable
-- agreement for further details.


-- Generated by Quartus Prime Version 16.0 (Build Build 211 04/27/2016)
-- Created on Fri Mar 10 17:48:23 2017

-- from petr zejdl

LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;



--  Entity Declaration

ENTITY freq_meas IS
-- {{ALTERA_IO_BEGIN}} DO NOT REMOVE THIS LINE!
PORT
(
	clk : IN STD_LOGIC;
	rst : IN STD_LOGIC;
	clk_meas : IN STD_LOGIC;
	freq : OUT STD_LOGIC_VECTOR(31 downto 0)
);
-- {{ALTERA_IO_END}} DO NOT REMOVE THIS LINE!

END freq_meas;


--  Architecture Body

ARCHITECTURE freq_meas_architecture OF freq_meas IS

signal delay_cnt : std_logic_vector(31 downto 0);
signal freq_cnt : std_logic_vector(31 downto 0);
signal freq_store : std_logic_Vector(31 downto 0);
signal store_freq: std_logic;
signal store_freq_d: std_logic_vector(2 downto 0);
signal store_freq_flag : std_logic;

BEGIN

	delay_cnt_p: process(rst, clk)
	begin
--		if rst = '1' then
--			delay_cnt <= (others => '0');
--		els
		if rising_edge(clk) then
			store_freq <= '0';
			if unsigned(delay_cnt) >= x"0EE6B280" then -- 250 000 000
 				store_freq <= '1';
 		    end if;
 		    if unsigned(delay_cnt) >= x"0EE6B285" then
				delay_cnt <= (others => '0');
			else
				delay_cnt <= std_logic_vector( unsigned(delay_cnt) + 1 );
			end if;
		end if;
	end process;

	sync: process(clk_meas)
	begin
		if rising_edge(clk_meas) then
			store_freq_d <= store_freq_d(1 downto 0) & store_freq;
		end if;
	end process;
	
	store_freq_flag <= (not store_freq_d(2)) and store_freq_d(1);
	
	freq_cnt_p: process(clk_meas)
	begin
		if rising_edge(clk_meas) then
			if store_freq_flag = '1' then
				freq_store <= freq_cnt;
				freq_cnt <= (others => '0');
			else
				freq_cnt <= std_logic_vector( unsigned(freq_cnt) + 1 );	
			end if;
		end if;
	end process;
	
	freq <= freq_store;

END freq_meas_architecture;


